// Generated by IcedCoffeeScript 1.2.0t
(function() {
  var iced, room, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  room = (function() {

    room.name = 'room';

    function room(data) {
      var empty, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      this.fillAlbumArt = __bind(this.fillAlbumArt, this);

      this.playTracks = __bind(this.playTracks, this);

      this.grabTrackList = __bind(this.grabTrackList, this);

      this.trackRefresh = __bind(this.trackRefresh, this);

      this.trackChanged = __bind(this.trackChanged, this);

      this.roomData = data.room;
      this.sp = getSpotifyApi(1);
      this.models = this.sp.require('sp://import/scripts/api/models');
      this.models.player.observe(this.models.EVENT.CHANGE, this.trackChanged);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Spotify/DynamicJukebox/_js/room.iced",
          funcname: "room"
        });
        _this.grabTrackList(__iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return empty = arguments[0];
            };
          })(),
          lineno: 7
        }));
        __iced_deferrals._fulfill();
      })(function() {
        $("#room").css("display", "block");
        $("#frontpageBack").css("display", "none");
        if (typeof getSpotifyApi !== "undefined") {
          _this.isSpotify = true;
          $(".albumart").css({
            "-webkit-transform": "none",
            "margin-left": "-10%"
          });
          $("#room").css;
        } else {
          _this.isSpotify = false;
        }
        console.log(_this.roomData.name);
        $("#h1rmname").html(_this.roomData.name);
        _this.fillAlbumArt();
        _this.setNowPlaying();
        _this.setOccupants();
        return _this.trackRefresh();
      });
    }

    room.prototype.trackChanged = function(e) {
      var data, newTrack, trackid, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      trackid = this.models.player.track.data.uri.replace("spotify:track:", "");
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Spotify/DynamicJukebox/_js/room.iced",
          funcname: "room.trackChanged"
        });
        $.getJSON(baseUrl + "room/" + _this.roomData.id + "/started.json?track_id=" + trackid + "&user[fb_id]=" + fBook.userData.id, null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return data = arguments[0];
            };
          })(),
          lineno: 35
        }));
        __iced_deferrals._fulfill();
      })(function() {
        _this.trackData = data;
        newTrack = _this.models.Track.fromURI("spotify:track:" + _this.trackData.tracks[1]);
        _this.playlist.add(newTrack);
        _this.currentTrack = _this.models.player.track;
        return _this.setNowPlaying();
      });
    };

    room.prototype.trackRefresh = function() {
      var data, index, missingTracks, newTrack, newTracks, oldTrack, oldTrackData, roomData, rotateComplete, target, track, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Spotify/DynamicJukebox/_js/room.iced",
          funcname: "room.trackRefresh"
        });
        $.getJSON(baseUrl + "room/" + _this.roomData.id + "/tracks.json?&user[fb_id]=" + fBook.userData.id, null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return data = arguments[0];
            };
          })(),
          lineno: 44
        }));
        $.getJSON(baseUrl + "room/" + _this.roomData.id + ".json?user[fb_id]=" + fBook.userData.id, null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return roomData = arguments[0];
            };
          })(),
          lineno: 46
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _j, _k, _len, _len2, _len3, _ref, _ref2;
        oldTrackData = _this.trackData;
        console.log(roomData);
        _this.roomData = roomData.room;
        _this.trackData = data;
        missingTracks = [];
        newTracks = [];
        _ref = oldTrackData.tracks;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          track = _ref[_i];
          if (data.tracks.indexOf(track) === -1) {
            missingTracks.push(_this.models.Track.fromURI("spotify:track:" + track).data);
          }
        }
        _ref2 = data.tracks;
        for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {
          track = _ref2[_j];
          if (oldTrackData.tracks.indexOf(track) === -1) {
            newTracks.push(_this.models.Track.fromURI("spotify:track:" + track).data);
          }
        }
        for (_k = 0, _len3 = missingTracks.length; _k < _len3; _k++) {
          oldTrack = missingTracks[_k];
          index = missingTracks.indexOf(oldTrack);
          newTrack = newTracks[index];
          if (!oldTrack.album || !oldTrack.album.cover || !newTrack.album || !newTrack.album.cover) {
            continue;
          }
          target = $("div[data-id='" + oldTrack.album.cover + "']");
          target.css("-webkit-transform", "rotate3d(1,0,0, 90deg)");
          target.attr("data-id", oldTrack.album.cover);
          rotateComplete = function(target, newTrack) {
            return function() {
              return target.css({
                "-webkit-transform": "rotate3d(1,0,0, 00deg)",
                "background-image": "url(" + newTrack.album.cover + ")"
              });
            };
          };
          setTimeout(rotateComplete(target, newTrack), 500);
        }
        _this.setOccupants();
        return setTimeout(function() {
          console.log("hit");
          return _this.trackRefresh();
        }, 1000 * 3);
      });
    };

    room.prototype.grabTrackList = function(retF) {
      var data, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/alastair/Spotify/DynamicJukebox/_js/room.iced",
          funcname: "room.grabTrackList"
        });
        $.getJSON(baseUrl + "room/" + _this.roomData.id + "/tracks.json?&user[fb_id]=" + fBook.userData.id, null, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return data = arguments[0];
            };
          })(),
          lineno: 85
        }));
        __iced_deferrals._fulfill();
      })(function() {
        _this.trackData = data;
        _this.playTracks();
        return retF();
      });
    };

    room.prototype.playTracks = function() {
      var nextTrack, targetTrack;
      if (!this.playlist) {
        this.playlist = new this.models.Playlist();
      } else if (this.playlist.tracks.length === 2) {
        this.playlist.remove(this.playlist.tracks[1]);
      }
      targetTrack = null;
      nextTrack = null;
      if (!this.trackData.room.current_track_id) {
        $.getJSON(baseUrl + "room/" + this.roomData.id + "started.json?track_id=" + this.trackData.tracks[0] + "&user[fb_id]=" + fBook.userData.id);
        targetTrack = this.trackData.tracks[0];
        nextTrack = this.trackData.tracks[1];
      } else {
        targetTrack = this.trackData.room.current_track_id;
        nextTrack = this.trackData.tracks[0];
      }
      targetTrack = this.models.Track.fromURI("spotify:track:" + targetTrack);
      nextTrack = this.models.Track.fromURI("spotify:track:" + nextTrack);
      if (this.playlist.tracks.length === 0) this.playlist.add(targetTrack);
      this.currentTrack = targetTrack.data;
      return this.models.player.play(targetTrack, this.playlist);
    };

    room.prototype.fillAlbumArt = function() {
      var artTarget, col, i, img, imgEl, loadedFunc, offset, placeFunc, row, size, target, track, trackObj, tracks, x, y, zindex, _i, _j, _len, _ref, _results,
        _this = this;
      artTarget = $("#room .albumart");
      size = {
        width: artTarget.width(),
        height: artTarget.height()
      };
      col = -1;
      row = 0;
      offset = 0;
      tracks = [];
      _ref = this.trackData.tracks;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        track = _ref[_i];
        trackObj = this.models.Track.fromURI("spotify:track:" + track).data;
        if (!trackObj || !trackObj.album || !trackObj.album.cover) continue;
        if (tracks.indexOf(trackObj.album.cover) === -1) {
          tracks.push(trackObj.album.cover);
        }
      }
      _results = [];
      for (i = _j = 0; _j <= 60; i = ++_j) {
        col++;
        if (col * 200 > size.width) {
          col = 0;
          row++;
        }
        x = 200 * col;
        y = 200 * row;
        if (tracks.length < (i + offset + 1)) offset -= tracks.length;
        img = tracks[i + offset];
        zindex = i;
        target = $("<div class='art' data-id='" + img + "' style='z-index:" + zindex + "; top:" + y + "px; left: " + x + "px'></div>");
        imgEl = new Image();
        loadedFunc = function(target, imgEl) {
          return function() {
            var _this = this;
            target.css("-webkit-transform", "rotate3d(1,0,0, 90deg)");
            return setTimeout(function() {
              var src;
              src = imgEl.src;
              return target.css({
                "-webkit-transform": "rotate3d(1,0,0, 00deg)",
                "background-image": "url(" + src + ")"
              });
            }, 1000);
          };
        };
        imgEl.onload = loadedFunc(target, imgEl);
        placeFunc = function(target, imgEl, img, i) {
          return function() {
            imgEl.src = img;
            if (i === 60) {
              return setTimeout(function() {
                return $(".artcover").css("opacity", 1);
              }, 500);
            }
          };
        };
        setTimeout(placeFunc(target, imgEl, img, i), (row + col) * 200);
        _results.push(artTarget.append(target));
      }
      return _results;
    };

    room.prototype.setNowPlaying = function() {
      var img, playTarget;
      if (!this.currentTrack || !this.currentTrack.album) return;
      console.log(this.currentTrack.album);
      if (this.currentTrack.album.data) {
        img = this.currentTrack.album.data.cover;
      } else {
        img = this.currentTrack.album.cover;
      }
      playTarget = $("#playinfo");
      $(".currentart", playTarget).css("background-image", "url(" + img + ")");
      $("h3", playTarget).html(this.currentTrack.name);
      return $("p", playTarget).html(this.currentTrack.artists[0].name);
    };

    room.prototype.setOccupants = function() {
      var bigImg, data, more, numToDraw, person, _i, _len, _ref;
      $("#occupants ul").empty();
      data = this.roomData.users;
      numToDraw = 14;
      if (data.length > 14) numToDraw = 11;
      _ref = data.slice(0, numToDraw);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        person = _ref[_i];
        bigImg = $("<li style='background-image: url(https://graph.facebook.com/" + person.fb_id + "/picture?type=large)'></li>");
        $("#occupants ul").append(bigImg);
      }
      if (data.length > 14) {
        more = data.length - 11;
        return $(".chosenby", playTarget).append("<li class='more'>(+ " + more + " more)</li>");
      }
    };

    return room;

  })();

  window.Room = room;

}).call(this);

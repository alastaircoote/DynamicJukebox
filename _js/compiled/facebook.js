// Generated by IcedCoffeeScript 1.2.0t
(function() {
  var facebook, iced, __iced_k, __iced_k_noop,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  __iced_k = __iced_k_noop = function() {};

  facebook = (function() {

    facebook.name = 'facebook';

    facebook.prototype.permissions = ["user_actions.music"];

    facebook.prototype.appId = 333527893368697;

    function facebook() {
      this.processInitFuncs = __bind(this.processInitFuncs, this);

      this.getFriends = __bind(this.getFriends, this);

      this.doRequest = __bind(this.doRequest, this);

      var auth,
        _this = this;
      window.fbInitFuncs = [];
      this.isSpotify = typeof getSpotifyApi === "function";
      if (this.isSpotify) {
        this.spotify = getSpotifyApi();
        if (!$.cookie("access_token")) {
          auth = this.spotify.require('sp://import/scripts/api/auth');
          auth.authenticateWithFacebook(this.appId, this.permissions, {
            onSuccess: function(accessToken, ttl) {
              var data, expiryDate, ___iced_passed_deferral, __iced_deferrals, __iced_k;
              __iced_k = __iced_k_noop;
              ___iced_passed_deferral = iced.findDeferral(arguments);
              expiryDate = new Date().valueOf() + (ttl * 1000);
              $.cookie("access_token", accessToken, new Date(expiryDate));
              _this.accessToken = accessToken;
              _this.timeToExpiry = ttl;
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "/Users/alastair/Spotify/DynamicJukebox/_js/facebook.iced",
                  funcname: "onSuccess"
                });
                _this.doRequest("/me", __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return data = arguments[0];
                    };
                  })(),
                  lineno: 17
                }));
                __iced_deferrals._fulfill();
              })(function() {
                _this.userData = data;
                return _this.processInitFuncs();
              });
            }
          });
        } else {
          this.accessToken = $.cookie("access_token");
          this.processInitFuncs();
        }
      } else {
        $("body").append("<div id='fb-root'/>");
        window.fbAsyncInit = function() {
          var data, response, ___iced_passed_deferral, __iced_deferrals, __iced_k;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          FB.init({
            appId: _this.appId
          }, {
            status: true,
            cookie: false,
            xfbml: false
          });
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/alastair/Spotify/DynamicJukebox/_js/facebook.iced",
              funcname: "fbAsyncInit"
            });
            FB.getLoginStatus(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return response = arguments[0];
                };
              })(),
              lineno: 32
            }));
            __iced_deferrals._fulfill();
          })(function() {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "/Users/alastair/Spotify/DynamicJukebox/_js/facebook.iced",
                funcname: "fbAsyncInit"
              });
              _this.doRequest("/me", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return data = arguments[0];
                  };
                })(),
                lineno: 33
              }));
              __iced_deferrals._fulfill();
            })(function() {
              _this.userData = data;
              return _this.processInitFuncs();
            });
          });
        };
        $.ajax({
          url: "http://connect.facebook.net/en_US/all.js",
          dataType: "script",
          cache: true
        });
      }
    }

    facebook.prototype.doRequest = function(url, retFunc) {
      var data, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (this.isSpotify) {
        url = "https://graph.facebook.com" + url;
        if (url.indexOf("?") > -1) {
          url += "&";
        } else {
          url += "?";
        }
        url += "access_token=" + this.accessToken;
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/alastair/Spotify/DynamicJukebox/_js/facebook.iced",
            funcname: "facebook.doRequest"
          });
          $.getJSON(url, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return data = arguments[0];
              };
            })(),
            lineno: 48
          }));
          __iced_deferrals._fulfill();
        })(function() {
          return __iced_k(retFunc(data, url));
        });
      } else {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/alastair/Spotify/DynamicJukebox/_js/facebook.iced",
            funcname: "facebook.doRequest"
          });
          FB.api(url, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return data = arguments[0];
              };
            })(),
            lineno: 51
          }));
          __iced_deferrals._fulfill();
        })(function() {
          return __iced_k(retFunc(data, url));
        });
      }
    };

    facebook.prototype.getFriends = function(retFunc) {
      var data, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!this.friendsList) {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/alastair/Spotify/DynamicJukebox/_js/facebook.iced",
            funcname: "facebook.getFriends"
          });
          _this.doRequest("/me/friends?fields=name,picture&limit=100", __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return data = arguments[0];
              };
            })(),
            lineno: 55
          }));
          __iced_deferrals._fulfill();
        })(function() {
          _this.friendsList = data.data;
          return __iced_k(retFunc(data.data));
        });
      } else {
        return __iced_k(retFunc(this.friendsList));
      }
    };

    facebook.prototype.processInitFuncs = function() {
      var func, _i, _len, _ref;
      _ref = window.fbInitFuncs;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        func = _ref[_i];
        func();
      }
      return window.fbInitFuncs = {
        push: function(func) {
          return func();
        }
      };
    };

    return facebook;

  })();

  window.Facebook = facebook;

}).call(this);
